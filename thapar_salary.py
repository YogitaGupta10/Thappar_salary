# -*- coding: utf-8 -*-
"""Thapar Salary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dr7bUgeh17GD22Sp8N5WL8kiS7ujbIoe
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df= pd.read_csv('/content/train.csv')

df.head()

df.info()

df.describe()

sns.heatmap(df.corr())

cr= df.corr()
cr_df= cr['salary'].sort_values(ascending= False)
cr_df

df.isnull().sum()



df.groupby('company').count()['id'].plot(kind='bar')
plt.show();

df.groupby('department').count()['id'].plot(kind='bar')
plt.show();

#to check the highest avg_salary
company_avg= df.groupby(['company', 'department'])['salary'].mean()
company_avg.sort_values(ascending=False)

#to check the avg_salary company's Department wise.
company_avg= df.groupby(['company', 'department'])['salary'].mean()
company_avg

plt.figure(figsize=(10, 6))
plt.scatter(df['company'], df['salary'], alpha=0.5,color='blue')
plt.title('Relationship between company and Salary')
plt.xlabel('Company')
plt.ylabel('Salary')

plt.show()

df.boxplot(column='salary', by='company')
plt.title('Box plot of salary by company')
plt.suptitle('')
plt.show()

df.boxplot(column='salary', by='department')
plt.title('Box plot of salary by department')
plt.suptitle('')
plt.show()

# print(np.where(df['salary']>140000))
# df[(df['salary'] > 140000)]



from scipy import stats

quartiles = df['salary'].quantile([0.25, 0.75])
iqr = quartiles[0.75] - quartiles[0.25]

print(iqr)



# upper_limit = percentile75 + 1.5 * iqr
# lower_limit = percentile25 - 1.5 * iqr

# df[df['salary'] > upper_limit]
# df[df['salary'] < lower_limit]

df.dtypes

plt.figure(figsize=(10, 6))
plt.scatter(df['full_time'], df['salary'], alpha=0.5,color='blue')
plt.title('Relationship between Full time and Salary')
plt.xlabel('Full time')
plt.ylabel('Salary')

z = np.polyfit(df['full_time'], df['salary'], 1)
p = np.poly1d(z)
plt.plot(df['full_time'],p(df['full_time']),"r--")
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df['age_when_joined'], df['salary'], alpha=0.5,color='blue')
plt.title('Relationship between Age when joined and Salary')
plt.xlabel('age_when_joined')
plt.ylabel('Salary')

z = np.polyfit(df['age'], df['salary'], 1)
p = np.poly1d(z)
plt.plot(df['age'],p(df['age']),"r--")

plt.show()

df.boxplot(column='annual_bonus', by='department')
plt.title('Box plot of annual bonus by department')
plt.suptitle('')
plt.show()

"""Bonus are given in the following order of department:

1.Sales

2.Design

3.AI

4.Search engine

5.Big data

6.Support
"""

df.boxplot(column='annual_bonus', by='company')
plt.title('Box plot of annual bonus by company')
plt.suptitle('')
plt.show()

"""As we have seen that pear deals with more of sales and thus has more bonuses(inferred from the graph above). similarly, glasses deal with support and AI , thus is the second in terms of annual bonus. While the bonuses are least in Big data, the Cheerper is the company that gives the least amount annual bonuses. It could also be that since Cheerper provides the highest avg_salary (as calculated above), it requires less amount annual bonus to be given."""

plt.figure(figsize=(10, 6))
plt.scatter(df['age'], df['salary'], alpha=0.5,color='blue')
plt.title('Relationship between Age and Salary')
plt.xlabel('Age')
plt.ylabel('Salary')

z = np.polyfit(df['age'], df['salary'], 1)
p = np.poly1d(z)
plt.plot(df['age'],p(df['age']),"r--")

plt.show()

df.boxplot(column='salary', by='age')
plt.title('Box plot of salary by age')
plt.suptitle('')
plt.show()

df['age'].unique()

# df.hist(column=['salary', 'age'],bins=5, figsize=(15,6))

plt.figure(figsize=(10, 6))
plt.scatter(df['prior_years_experience'], df['salary'], alpha=0.5,color='blue')
plt.title('Relationship between Prior experience and Salary')
plt.xlabel('prior_years_experience')
plt.ylabel('Salary')

z = np.polyfit(df['prior_years_experience'], df['salary'], 1)
p = np.poly1d(z)
plt.plot(df['prior_years_experience'],p(df['prior_years_experience']),"r--")

plt.show()

"""There is hardly any difference or say no major change in slary due to experience. Rather the slope decreases by a small factor with increase in the experience."""

dummies_company = pd.get_dummies(df.company)
dummies_department = pd.get_dummies(df.department)
dummies_company.head()

df2 = df.drop(['company', 'department'],axis = 'columns')
df3 = pd.concat([df2, dummies_company, dummies_department],axis = 'columns')
df_new = df3
df_new.head()

from sklearn.preprocessing import LabelEncoder,MinMaxScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsRegressor

from sklearn.metrics import explained_variance_score,mean_absolute_error,r2_score

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

X= df_new.drop(['id','salary'], axis=1)
y = df_new.salary

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 10)

# lr = LogisticRegression()
# lr.fit(X_train, y_train)

rf= RandomForestRegressor()
rf.fit(X_train, y_train)

y_pred2= rf.predict(X_test)

mse = mean_squared_error(y_test, y_pred2)
r2_square = r2_score(y_test,y_pred2)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

dt= DecisionTreeRegressor(max_depth=8)
dt.fit(X_train, y_train)

y_pred3= rf.predict(X_test)

mse = mean_squared_error(y_test, y_pred3)
r2_square = r2_score(y_test,y_pred3)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

from sklearn.ensemble import HistGradientBoostingRegressor, GradientBoostingRegressor, ExtraTreesRegressor
from sklearn.svm import SVR
from lightgbm import LGBMRegressor
from xgboost import XGBRegressor

xgb=XGBRegressor()
xgb.fit(X_train, y_train)

y_pred4=xgb.predict(X_test)

mse = mean_squared_error(y_test, y_pred4)
r2_square = r2_score(y_test,y_pred4)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

lgb= LGBMRegressor()
lgb.fit(X_train, y_train)

y_pred5=lgb.predict(X_test)

mse = mean_squared_error(y_test, y_pred5)
r2_square = r2_score(y_test,y_pred5)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

gb= GradientBoostingRegressor()
gb.fit(X_train,y_train)

y_pred6=gb.predict(X_test)

mse = mean_squared_error(y_test, y_pred6)
r2_square = r2_score(y_test,y_pred6)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

hgb= HistGradientBoostingRegressor()
hgb.fit(X_train,y_train)

y_pred7=hgb.predict(X_test)

mse = mean_squared_error(y_test, y_pred7)
r2_square = r2_score(y_test,y_pred7)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

xtr=ExtraTreesRegressor()
xtr.fit(X_train, y_train)

y_pred8=xtr.predict(X_test)

mse = mean_squared_error(y_test, y_pred8)
r2_square = r2_score(y_test,y_pred8)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

